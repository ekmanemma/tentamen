openapi: "3.0.0"
info:
  version: 1.0.0
  title: BookLibrary
  description: |
    books available for loan
  license:
    name: MIT
servers:
- url: http://localhost:3000
paths:
  /books:
    get:
      summary: Lists all books
      operationId: listBooks
      tags:
      - books
      responses:
        '200':
          description: Array of books
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseBooks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a book
      operationId: createBook
      tags:
        - books
      requestBody:
        description: the book to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/ResponseBook'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/{bookId}:
    get:
      summary: Get one book
      operationId: getBook
      tags:
        - books
      parameters:
        - name: bookId
          required: true
          in: path
          description: The id of the book to show
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBook"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a book
      operationId: deleteBook
      tags:
        - books
      parameters:
        - name: bookId
          required: true
          in: path
          description: The id of the book to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBook"
        '204':
          description: No change (nothing was deleted)
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a book
      operationId: updateBook
      tags:
        - books
      requestBody:
        description: the book to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      parameters:
        - name: bookId
          required: true
          in: path
          description: The id of the book to update
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBook"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Book: # A single book
      type: object
      properties:
        ISBN: 
          type: integer
        Title:
          type: string
        Author:
          type: string
        Price:
          type: integer
        SellerEmail:
          type: string
        Used:
          type: boolean
        Location: 
          type: object
          properties:
            City: 
              type: string
            Street:
              type: string
        
# Add properties for your books here   
    ResponseBook: #Single book response including _id and __v
      allOf:
      - $ref: "#/components/schemas/Book"
      - properties:
          __v:
            type: integer
            format: uint32
          _id:
            type: string
            format: uuid
    ResponseBooks: #list of books
      type: array
      items:
        $ref: "#/components/schemas/ResponseBook"
    Error:
      required:
        - error
      properties:
        error:
          type: object
          properties:
            expose:
              type: boolean
            statusCode:
              type: integer
              format: uint32
            status:
              type: integer
              format: uint32
            body:
              title: body as escaped json
              type: string
            type:
              title: fault desciption
              type: string
